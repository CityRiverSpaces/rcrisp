[{"path":[]},{"path":"https://cityriverspaces.github.io/rcrisp/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to rcrisp","title":"Contributing to rcrisp","text":"outlines propose change rcrisp. detailed discussion contributing packages, please see tidyverse development contributing guide code review principles.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to rcrisp","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to rcrisp","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See guide create great issue advice.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to rcrisp","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"CityRiverSpaces/rcrisp\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to rcrisp","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/CONTRIBUTING.html","id":"roadmap","dir":"","previous_headings":"","what":"Roadmap","title":"Contributing to rcrisp","text":"strive develop rcrisp robust tool delineation. Although package already produces reliable delineations, see room improvement. plan : Expand use input data OpenStreetMap Overture Maps Copernicus GLO-30 Digital Elevation Models Global Digital Terrain Models OpenTopography. Improve segmentation (1) merging neighbouring corridor segments using morphological similarity learned segment-level morphometrics clustering (2) splitting large segments based potential river crossings identified street network. Improve user interface rcrisp validate output building inventory use cases meet needs broad research community. : Develop rcrisp package urban river space analysis, maintain focus providing morphologically grounded boundaries adopted subsequent analyses using domain-specific tools.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to rcrisp","text":"Please note rcrisp project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://cityriverspaces.github.io/rcrisp/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright 2025 Claudiu Forgaci  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://cityriverspaces.github.io/rcrisp/PULL_REQUEST_TEMPLATE.html","id":"what-type-of-pr-is-this-check-all-applicable","dir":"","previous_headings":"","what":"What type of PR is this? (check all applicable)","title":"NA","text":"Refactor Feature Bug Fix Optimization Documentation Update","code":""},{"path":[]},{"path":"https://cityriverspaces.github.io/rcrisp/PULL_REQUEST_TEMPLATE.html","id":"related-issues","dir":"","previous_headings":"","what":"Related Issues","title":"NA","text":"Related Issue # Closes #","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/PULL_REQUEST_TEMPLATE.html","id":"addedupdated-tests","dir":"","previous_headings":"","what":"Added/updated tests?","title":"NA","text":"encourage keep code coverage percentage 75% . Yes , : please replace line details tests included need help writing tests","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/PULL_REQUEST_TEMPLATE.html","id":"added-entry-in-changelog","dir":"","previous_headings":"","what":"Added entry in changelog?","title":"NA","text":"user-facing changes, add line describing changes NEWS.md Yes","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/articles/getting-started.html","id":"what-is-rcrisp","dir":"Articles","previous_headings":"","what":"What is rcrisp?","title":"Getting started with rcrisp","text":"rcrisp automates morphological delineation riverside urban areas following method developed Forgaci (2018, pp. 88–89). overcomes challenge arbitrary urban river corridor delineation providing reliable workflow produce morphologically grounded spatial analytical units. spatial units enable integrated local analyses (many different layers within one case) large-scale cross-case analyses (many cases using comparable spatial units) wide range domains application, urban planning, environmental management, public space design, disaster risk reduction. short, given city name river name, : identifies corridor boundaries street network along edges river valley; (optionally) segments corridor; (optionally) delineates river space.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/articles/getting-started.html","id":"workflow","dir":"Articles","previous_headings":"","what":"Workflow","title":"Getting started with rcrisp","text":"OpenStreetMap layers using get_osm_*() functions (Optional) global Digital Elevation Model data Delineate river valley, corridor, segments /riverspace --one delineate() function dedicated delineate_*() functions Visualize, validate, export results use downstream analyses","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/articles/getting-started.html","id":"data-considerations","dir":"Articles","previous_headings":"","what":"Data considerations","title":"Getting started with rcrisp","text":"Use appropriate projected CRS (e.g., relevant UTM EPSG code). Verify OSM coverage elevation availability area. Spatial (street railway) network completeness elevation data quality may affect corridor segment accuracy. delineate() function retrieves OSM data global DEM data default, additional data retrieval needed. delineate_*() functions allow data input, OSM global DEM data.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/articles/getting-started.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Getting started with rcrisp","text":"","code":"library(rcrisp)  # Parameters city_name <- \"Bucharest\" river_name <- \"Dâmbovița\" epsg_code <- 32635  # Delineation bd <- delineate(city_name, river_name, segments = TRUE) #> The default `network_buffer` of 3000 m is used for corridor delineation. #> Saving data to cache directory: /home/runner/.cache/R/rcrisp/osmdata_waterway__25.967_44.334_26.226_44.541.rds #> Saving data to cache directory: /home/runner/.cache/R/rcrisp/osmdata_natural_water_25.967_44.334_26.226_44.541.rds #> Saving data to cache directory: /home/runner/.cache/R/rcrisp/osmdata_highway_motorway_trunk_primary_secondary_tertiary_motorway_link_trunk_link_primary_link_secondary_link_tertiary_link_25.929_44.367_26.263_44.494.rds #> Saving data to cache directory: /home/runner/.cache/R/rcrisp/osmdata_railway_rail_25.929_44.367_26.263_44.494.rds #> Saving data to cache directory: /home/runner/.cache/R/rcrisp/dem_Copernicus_DSM_COG_10_N44_00_E026_00_DEM_Copernicus_DSM_COG_10_N44_00_E025_00_DEM_25.898_44.344_26.295_44.517.rds #> Linking to GEOS 3.12.1, GDAL 3.8.4, PROJ 9.4.0; sf_use_s2() is TRUE  # Base layers for visualisation bb <- get_osm_bb(city_name) streets <- get_osm_streets(bb, epsg_code)$geometry #> Saving data to cache directory: /home/runner/.cache/R/rcrisp/osmdata_highway_motorway_trunk_primary_secondary_tertiary_motorway_link_trunk_link_primary_link_secondary_link_tertiary_link_25.967_44.334_26.226_44.541.rds railways <- get_osm_railways(bb, epsg_code)$geometry #> Saving data to cache directory: /home/runner/.cache/R/rcrisp/osmdata_railway_rail_25.967_44.334_26.226_44.541.rds  # Plot plot(bd$corridor) plot(railways, col = \"darkgrey\", add = TRUE, lwd = 0.5) plot(streets, add = TRUE) plot(bd$segments, border = \"orange\", add = TRUE, lwd = 3) plot(bd$corridor, border = \"red\", add = TRUE, lwd = 3)"},{"path":"https://cityriverspaces.github.io/rcrisp/articles/getting-started.html","id":"interpretation-and-next-steps","dir":"Articles","previous_headings":"","what":"Interpretation and next steps","title":"Getting started with rcrisp","text":"Use segments /river spaces comparative analyses along river; Integrate relevant data layers within segment /river space interest; Run analysis cities compare phenomenon interest across corridors, segments /river spaces; Export GIS formats processing.","code":""},{"path":[]},{"path":"https://cityriverspaces.github.io/rcrisp/articles/vig_03-network-preparation.html","id":"input-data","dir":"Articles","previous_headings":"","what":"1. Input data","title":"3. Preparing the network for delineation","text":"article show set spatial network city using urban river corridor delineation. work OSM data city Bucharest provided rcrisp example data. See get OSM data vignette(\"getting-osm-data\"). start loading OSM data. According delineation method, persistent physical structures need considered. Therefore, network contain streets railways OSM. Note: city question contains surface-level structures need included network, -ground metro lines, retrieve appropriate OSM tags following instructions vignette(\"getting-osm-data\") include network.","code":"streets <- bucharest_osm$streets railways <- bucharest_osm$railways"},{"path":"https://cityriverspaces.github.io/rcrisp/articles/vig_03-network-preparation.html","id":"setting-up-the-network","dir":"Articles","previous_headings":"","what":"2. Setting up the network","title":"3. Preparing the network for delineation","text":"combining streets railway lines, create network object. able use network delineation, need flatten (, project bridges ground surface) add nodes intersections edges. function first identifies unique apparent intersections edges. injects points within edge geometries (linestrings), can raised network nodes cleaning step. Note: sfnetworks::st_network_blend used purpose, function adds external points one edge (closest one).","code":"network <- bind_rows(streets, railways) |>   as_sfnetwork(directed = FALSE) |>   activate(\"nodes\") |>   mutate(node_id = row_number()) network_new <- flatten_network(network)"},{"path":"https://cityriverspaces.github.io/rcrisp/articles/vig_03-network-preparation.html","id":"network-cleaning","dir":"Articles","previous_headings":"","what":"3. Network cleaning","title":"3. Preparing the network for delineation","text":"now perform standard cleaning tasks network: subdividing edges adding missing nodes, removing pseudo-nodes keeping main component network.","code":"network_cleaned <- clean_network(network_new)"},{"path":"https://cityriverspaces.github.io/rcrisp/articles/vig_03-network-preparation.html","id":"visualise-cleaned-network","dir":"Articles","previous_headings":"","what":"4. Visualise cleaned network","title":"3. Preparing the network for delineation","text":"Visualize cleaned network:","code":"network_new_nodes <- network_cleaned |>   activate(\"nodes\") |>   filter(is.na(node_id)) |>   activate(\"edges\") |>   filter(is.na(from) & is.na(to))  network_removed_nodes <- network |>   activate(\"nodes\") |>   filter(!node_id %in% (activate(network_cleaned, \"nodes\") |>                           pull(node_id))) |>   activate(\"edges\") |>   filter(is.na(from) & is.na(to))  par(mfrow = c(1, 2)) plot(network, col = \"grey50\",      xlim = c(425100, 425400), ylim = c(4922400, 4923000),      main = \"Network before preprocessing\") plot(network_cleaned |> activate(\"nodes\"), col = \"grey50\",      xlim = c(425100, 425400), ylim = c(4922400, 4923000),      main = \"Network after preprocessing\") plot(network_new_nodes, col = \"darkgreen\",      xlim = c(425100, 425400), ylim = c(4922400, 4923000),      main = \"Network after preprocessing\", add = TRUE) plot(network_removed_nodes, col = \"red\", pch = 4,      xlim = c(425100, 425400), ylim = c(4922400, 4923000),      main = \"Network after preprocessing\", add = TRUE)"},{"path":[]},{"path":"https://cityriverspaces.github.io/rcrisp/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Claudiu Forgaci. Author, maintainer, copyright holder. Francesco Nattino. Author. Fakhereh Alidoost. Contributor. Meiert Willem Grootes. Contributor. Netherlands eScience Center. Funder.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Forgaci C, Nattino F (2025). rcrisp: Automate Delineation Urban River Spaces. R package version 0.2.0, https://cityriverspaces.github.io/rcrisp/.","code":"@Manual{,   title = {rcrisp: Automate the Delineation of Urban River Spaces},   author = {Claudiu Forgaci and Francesco Nattino},   year = {2025},   note = {R package version 0.2.0},   url = {https://cityriverspaces.github.io/rcrisp/}, }"},{"path":"https://cityriverspaces.github.io/rcrisp/index.html","id":"rcrisp","dir":"","previous_headings":"","what":"Automate the Delineation of Urban River Spaces","title":"Automate the Delineation of Urban River Spaces","text":"rcrisp provides tools automate morphological delineation riverside urban areas following method developed Forgaci (2018, pp. 88–89). method based premise analyses riverside urban phenomena often done without clear consistent spatial definition area interest morphological delineation can provide objective comparable approach. Accordingly, method proposes hierarchical delineation four spatial units: river valley, river corridor, corridor segments river space. units defined based combined morphologies river valley urban form. resulting delineations can used downstream analysis riverside urban areas can benefit consistent comparable spatial units, including land use, accessibility, ecosystem services assessments. package includes functions delineate river valley, river corridor, corridor segments, river space (.e., area riverbanks first line buildings) well --one function runs desired delineations. package also includes functions download preprocess OpenStreetMap (OSM) global Digital Elevation Model (DEM) data, required input data delineation process.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/index.html","id":"workflow-at-a-glance","dir":"","previous_headings":"","what":"Workflow at a glance","title":"Automate the Delineation of Urban River Spaces","text":"(Optionally) get OSM DEM base layers Run --one delineate() delineation-specific delineate_*() functions compute valley, corridor, segments, /river space Visualize/export results downstream analysis See Getting started vignette details purpose package, end--end example, data requirements, indication use cases.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Automate the Delineation of Urban River Spaces","text":"can install released version rcrisp CRAN : can install development version rcrisp GitHub :","code":"install.packages(\"rcrisp\") # install.packages(\"pak\") pak::pak(\"CityRiverSpaces/rcrisp\")"},{"path":"https://cityriverspaces.github.io/rcrisp/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Automate the Delineation of Urban River Spaces","text":"basic example shows solve common problem:","code":"library(rcrisp)  # Set location parameters city_name <- \"Bucharest\" river_name <- \"Dâmbovița\" epsg_code <- 32635  # Delineate river corridor bd <- delineate(city_name, river_name, segments = TRUE)  # Get base layers for plotting bb <- get_osm_bb(city_name) streets <- get_osm_streets(bb, epsg_code)$geometry railways <- get_osm_railways(bb, epsg_code)$geometry  # Plot results plot(bd$corridor) plot(railways, col = \"darkgrey\", add = TRUE, lwd = 0.5) plot(streets, add = TRUE) plot(bd$segments, border = \"orange\", add = TRUE, lwd = 3) plot(bd$corridor, border = \"red\", add = TRUE, lwd = 3)"},{"path":"https://cityriverspaces.github.io/rcrisp/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Automate the Delineation of Urban River Spaces","text":"rcrisp stable state development, degree active subsequent development envisioned primary authors. also look much forward contributions. See Contributing Guide details. package released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":[]},{"path":"https://cityriverspaces.github.io/rcrisp/reference/add_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Add weights to the network. — add_weights","title":"Add weights to the network. — add_weights","text":"prepare network search shortest paths node pairs. computed weights can account edge lenghts, distance target geometry, whether edge falls within specified region, aim exclude search shortest paths.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/add_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add weights to the network. — add_weights","text":"","code":"add_weights(   network,   target = NULL,   exclude_area = NULL,   penalty = 1000,   weight_name = \"weight\" )"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/add_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add weights to the network. — add_weights","text":"network network object target Target geometry calculate distances , simple feature geometry exclude_area Area aim exclude shortest-path search, simple feature geometry penalty Penalty (network CRS' units) added edges falls within excluded area weight_name Name column edge table add weights","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/add_weights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add weights to the network. — add_weights","text":"network object class sfnetworks::sfnetwork weights added column edge table","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/add_weights.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add weights to the network. — add_weights","text":"-th edge network, weight \\(w_i\\) defined following way: $$  w_i = |e_i| + d_{geom}(e_i) + p_{buf}(e_i) $$ first term edge length, second one distance target geometry (target, optional) last one penalty added centroid edge falls within specified region (exclude_area, optional). Shortest paths calculated resulting network thus tend prefer edges close target avoid edges within exclude_area.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/as_bbox.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the bounding box from the x object — as_bbox","title":"Get the bounding box from the x object — as_bbox","text":"x CRS, WGS84 assumed.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/as_bbox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the bounding box from the x object — as_bbox","text":"","code":"as_bbox(x)"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/as_bbox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the bounding box from the x object — as_bbox","text":"x Simple feature object (compatible) bounding box, provided either matrix (x, y rows min, max columns) vector (xmin, ymin, xmax, ymax)","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/as_bbox.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the bounding box from the x object — as_bbox","text":"bbox object returned sf::st_bbox()","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/as_bbox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the bounding box from the x object — as_bbox","text":"","code":"library(sf) #> Linking to GEOS 3.12.1, GDAL 3.8.4, PROJ 9.4.0; sf_use_s2() is TRUE bounding_coords <- c(25.9, 44.3, 26.2, 44.5) bb <- as_bbox(bounding_coords) class(bb) #> [1] \"bbox\" st_crs(bb) #> Coordinate Reference System: #>   User input: EPSG:4326  #>   wkt: #> GEOGCRS[\"WGS 84\", #>     ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>         MEMBER[\"World Geodetic System 1984 (Transit)\"], #>         MEMBER[\"World Geodetic System 1984 (G730)\"], #>         MEMBER[\"World Geodetic System 1984 (G873)\"], #>         MEMBER[\"World Geodetic System 1984 (G1150)\"], #>         MEMBER[\"World Geodetic System 1984 (G1674)\"], #>         MEMBER[\"World Geodetic System 1984 (G1762)\"], #>         MEMBER[\"World Geodetic System 1984 (G2139)\"], #>         ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>             LENGTHUNIT[\"metre\",1]], #>         ENSEMBLEACCURACY[2.0]], #>     PRIMEM[\"Greenwich\",0, #>         ANGLEUNIT[\"degree\",0.0174532925199433]], #>     CS[ellipsoidal,2], #>         AXIS[\"geodetic latitude (Lat)\",north, #>             ORDER[1], #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         AXIS[\"geodetic longitude (Lon)\",east, #>             ORDER[2], #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>     USAGE[ #>         SCOPE[\"Horizontal component of 3D system.\"], #>         AREA[\"World.\"], #>         BBOX[-90,-180,90,180]], #>     ID[\"EPSG\",4326]]"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/as_crs.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardise the coordinate reference system (CRS) of an object — as_crs","title":"Standardise the coordinate reference system (CRS) of an object — as_crs","text":"Standardise coordinate reference system (CRS) object","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/as_crs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardise the coordinate reference system (CRS) of an object — as_crs","text":"","code":"as_crs(x, allow_geographic = FALSE)"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/as_crs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardise the coordinate reference system (CRS) of an object — as_crs","text":"x object class sf, sfc, bbox, numeric character vector representing CRS (e.g., EPSG code). numeric, value unrestricted positive number representing valid EPSG code. allow_geographic Logical, whether allow geographic CRS (lat/lon).","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/as_crs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardise the coordinate reference system (CRS) of an object — as_crs","text":"object class sf::crs valid CRS.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/as_crs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardise the coordinate reference system (CRS) of an object — as_crs","text":"","code":"library(sf)  # Standardise a numeric EPSG code as_crs(4326, allow_geographic = TRUE) #> Coordinate Reference System: #>   User input: EPSG:4326  #>   wkt: #> GEOGCRS[\"WGS 84\", #>     ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>         MEMBER[\"World Geodetic System 1984 (Transit)\"], #>         MEMBER[\"World Geodetic System 1984 (G730)\"], #>         MEMBER[\"World Geodetic System 1984 (G873)\"], #>         MEMBER[\"World Geodetic System 1984 (G1150)\"], #>         MEMBER[\"World Geodetic System 1984 (G1674)\"], #>         MEMBER[\"World Geodetic System 1984 (G1762)\"], #>         MEMBER[\"World Geodetic System 1984 (G2139)\"], #>         ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>             LENGTHUNIT[\"metre\",1]], #>         ENSEMBLEACCURACY[2.0]], #>     PRIMEM[\"Greenwich\",0, #>         ANGLEUNIT[\"degree\",0.0174532925199433]], #>     CS[ellipsoidal,2], #>         AXIS[\"geodetic latitude (Lat)\",north, #>             ORDER[1], #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         AXIS[\"geodetic longitude (Lon)\",east, #>             ORDER[2], #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>     USAGE[ #>         SCOPE[\"Horizontal component of 3D system.\"], #>         AREA[\"World.\"], #>         BBOX[-90,-180,90,180]], #>     ID[\"EPSG\",4326]]  # Standardise a character EPSG code as_crs(\"EPSG:4326\", allow_geographic = TRUE) #> Coordinate Reference System: #>   User input: EPSG:4326  #>   wkt: #> GEOGCRS[\"WGS 84\", #>     ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>         MEMBER[\"World Geodetic System 1984 (Transit)\"], #>         MEMBER[\"World Geodetic System 1984 (G730)\"], #>         MEMBER[\"World Geodetic System 1984 (G873)\"], #>         MEMBER[\"World Geodetic System 1984 (G1150)\"], #>         MEMBER[\"World Geodetic System 1984 (G1674)\"], #>         MEMBER[\"World Geodetic System 1984 (G1762)\"], #>         MEMBER[\"World Geodetic System 1984 (G2139)\"], #>         ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>             LENGTHUNIT[\"metre\",1]], #>         ENSEMBLEACCURACY[2.0]], #>     PRIMEM[\"Greenwich\",0, #>         ANGLEUNIT[\"degree\",0.0174532925199433]], #>     CS[ellipsoidal,2], #>         AXIS[\"geodetic latitude (Lat)\",north, #>             ORDER[1], #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         AXIS[\"geodetic longitude (Lon)\",east, #>             ORDER[2], #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>     USAGE[ #>         SCOPE[\"Horizontal component of 3D system.\"], #>         AREA[\"World.\"], #>         BBOX[-90,-180,90,180]], #>     ID[\"EPSG\",4326]]  # Standardise a bbox object bb <- st_bbox(c(xmin = 25.9, ymin = 44.3, xmax = 26.2, ymax = 44.5),                 crs = 4326) as_crs(bb, allow_geographic = TRUE) #> Coordinate Reference System: #>   User input: EPSG:4326  #>   wkt: #> GEOGCRS[\"WGS 84\", #>     ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>         MEMBER[\"World Geodetic System 1984 (Transit)\"], #>         MEMBER[\"World Geodetic System 1984 (G730)\"], #>         MEMBER[\"World Geodetic System 1984 (G873)\"], #>         MEMBER[\"World Geodetic System 1984 (G1150)\"], #>         MEMBER[\"World Geodetic System 1984 (G1674)\"], #>         MEMBER[\"World Geodetic System 1984 (G1762)\"], #>         MEMBER[\"World Geodetic System 1984 (G2139)\"], #>         ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>             LENGTHUNIT[\"metre\",1]], #>         ENSEMBLEACCURACY[2.0]], #>     PRIMEM[\"Greenwich\",0, #>         ANGLEUNIT[\"degree\",0.0174532925199433]], #>     CS[ellipsoidal,2], #>         AXIS[\"geodetic latitude (Lat)\",north, #>             ORDER[1], #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         AXIS[\"geodetic longitude (Lon)\",east, #>             ORDER[2], #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>     USAGE[ #>         SCOPE[\"Horizontal component of 3D system.\"], #>         AREA[\"World.\"], #>         BBOX[-90,-180,90,180]], #>     ID[\"EPSG\",4326]]  # Standardise a simple feature object bb_sfc <- st_as_sfc(bb) bb_sf <- st_as_sf(bb_sfc) as_crs(bb_sf, allow_geographic = TRUE) #> Coordinate Reference System: #>   User input: EPSG:4326  #>   wkt: #> GEOGCRS[\"WGS 84\", #>     ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>         MEMBER[\"World Geodetic System 1984 (Transit)\"], #>         MEMBER[\"World Geodetic System 1984 (G730)\"], #>         MEMBER[\"World Geodetic System 1984 (G873)\"], #>         MEMBER[\"World Geodetic System 1984 (G1150)\"], #>         MEMBER[\"World Geodetic System 1984 (G1674)\"], #>         MEMBER[\"World Geodetic System 1984 (G1762)\"], #>         MEMBER[\"World Geodetic System 1984 (G2139)\"], #>         ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>             LENGTHUNIT[\"metre\",1]], #>         ENSEMBLEACCURACY[2.0]], #>     PRIMEM[\"Greenwich\",0, #>         ANGLEUNIT[\"degree\",0.0174532925199433]], #>     CS[ellipsoidal,2], #>         AXIS[\"geodetic latitude (Lat)\",north, #>             ORDER[1], #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         AXIS[\"geodetic longitude (Lon)\",east, #>             ORDER[2], #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>     USAGE[ #>         SCOPE[\"Horizontal component of 3D system.\"], #>         AREA[\"World.\"], #>         BBOX[-90,-180,90,180]], #>     ID[\"EPSG\",4326]] as_crs(bb_sfc, allow_geographic = TRUE) #> Coordinate Reference System: #>   User input: EPSG:4326  #>   wkt: #> GEOGCRS[\"WGS 84\", #>     ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>         MEMBER[\"World Geodetic System 1984 (Transit)\"], #>         MEMBER[\"World Geodetic System 1984 (G730)\"], #>         MEMBER[\"World Geodetic System 1984 (G873)\"], #>         MEMBER[\"World Geodetic System 1984 (G1150)\"], #>         MEMBER[\"World Geodetic System 1984 (G1674)\"], #>         MEMBER[\"World Geodetic System 1984 (G1762)\"], #>         MEMBER[\"World Geodetic System 1984 (G2139)\"], #>         ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>             LENGTHUNIT[\"metre\",1]], #>         ENSEMBLEACCURACY[2.0]], #>     PRIMEM[\"Greenwich\",0, #>         ANGLEUNIT[\"degree\",0.0174532925199433]], #>     CS[ellipsoidal,2], #>         AXIS[\"geodetic latitude (Lat)\",north, #>             ORDER[1], #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         AXIS[\"geodetic longitude (Lon)\",east, #>             ORDER[2], #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>     USAGE[ #>         SCOPE[\"Horizontal component of 3D system.\"], #>         AREA[\"World.\"], #>         BBOX[-90,-180,90,180]], #>     ID[\"EPSG\",4326]]"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/as_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a network from a collection of line strings — as_network","title":"Create a network from a collection of line strings — as_network","text":"Create network collection line strings","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/as_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a network from a collection of line strings — as_network","text":"","code":"as_network(edges, flatten = TRUE, clean = TRUE)"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/as_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a network from a collection of line strings — as_network","text":"edges sf::sf sf::sfc_LINESTRING object network edges flatten Whether intersections edges converted nodes clean Whether general cleaning tasks run generated network (see clean_network() description tasks)","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/as_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a network from a collection of line strings — as_network","text":"sfnetworks::sfnetwork object","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/as_network.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a network from a collection of line strings — as_network","text":"","code":"edges <- sf::st_sfc(   sf::st_linestring(matrix(c(0, 0, 1, 1), ncol = 2, byrow = TRUE)),   sf::st_linestring(matrix(c(0, 1, 1, 0), ncol = 2, byrow = TRUE)),   crs = sf::st_crs(\"EPSG:32635\") )  # Run with default values as_network(edges) #> # A sfnetwork with 5 nodes and 4 edges #> # #> # CRS:  EPSG:32635  #> # #> # An unrooted tree with spatially explicit edges #> # #> # Node data: 5 × 1 (active) #>             x #>   <POINT [m]> #> 1       (0 0) #> 2   (0.5 0.5) #> 3       (1 1) #> 4       (0 1) #> 5       (1 0) #> # #> # Edge data: 4 × 3 #>    from    to                x #>   <int> <int> <LINESTRING [m]> #> 1     1     2   (0 0, 0.5 0.5) #> 2     2     3   (0.5 0.5, 1 1) #> 3     2     4   (0 1, 0.5 0.5) #> # ℹ 1 more row  # Only build the spatial network as_network(edges, flatten = FALSE, clean = FALSE) #> # A sfnetwork with 4 nodes and 2 edges #> # #> # CRS:  EPSG:32635  #> # #> # An unrooted forest with 2 trees with spatially explicit edges #> # #> # Node data: 4 × 1 (active) #>             x #>   <POINT [m]> #> 1       (0 0) #> 2       (1 1) #> 3       (0 1) #> 4       (1 0) #> # #> # Edge data: 2 × 3 #>    from    to                x #>   <int> <int> <LINESTRING [m]> #> 1     1     2       (0 0, 1 1) #> 2     3     4       (0 1, 1 0)"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/bucharest_dambovita.html","id":null,"dir":"Reference","previous_headings":"","what":"rcrisp example delineation data for Bucharest — bucharest_dambovita","title":"rcrisp example delineation data for Bucharest — bucharest_dambovita","text":"Delineation generated rcrisp example data found https://zenodo.org/records/16325879","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/bucharest_dambovita.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rcrisp example delineation data for Bucharest — bucharest_dambovita","text":"","code":"bucharest_dambovita"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/bucharest_dambovita.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"rcrisp example delineation data for Bucharest — bucharest_dambovita","text":"list sf objects representing: valley valley boundaries river Dâmbovița. corridor corridor boundaries river Dâmbovița. segments Corridor segments river Dâmbovița. riverspace River space Dâmbovița.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/buffer.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a buffer region to a sf object — buffer","title":"Apply a buffer region to a sf object — buffer","text":"input object lat/lon coordinates, buffer approximately applied first transforming object suitable projected CRS, expanding given buffer, transforming back lat/lon system.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/buffer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a buffer region to a sf object — buffer","text":"","code":"buffer(obj, buffer_distance, ...)"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/buffer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a buffer region to a sf object — buffer","text":"obj sf object buffer_distance Buffer distance meters ... Optional parameters passed sf::st_buffer()","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/buffer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a buffer region to a sf object — buffer","text":"object class sf::sfc_POLYGON","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/build_river_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a spatial network from river centerlines — build_river_network","title":"Build a spatial network from river centerlines — build_river_network","text":"bounding box provided, river segments intersect considered. river intersects bounding box multiple times, longest intersecting segment considered.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/build_river_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a spatial network from river centerlines — build_river_network","text":"","code":"build_river_network(river, bbox = NULL)"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/build_river_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a spatial network from river centerlines — build_river_network","text":"river (MULTI)LINESTRING simple feature geometry representing river centerline bbox Bounding box area interest","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/build_river_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a spatial network from river centerlines — build_river_network","text":"sfnetworks::sfnetwork object","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/cache_directory.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the cache directory used by the package — cache_directory","title":"Return the cache directory used by the package — cache_directory","text":"default, user-specific directory returned tools::R_user_dir() used. different directory can used setting environment variable CRISP_CACHE_DIRECTORY. can also done adding following line .Renviron file: CRISP_CACHE_DIRECTORY=/path//crisp/cache/dir.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/cache_directory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the cache directory used by the package — cache_directory","text":"","code":"cache_directory()"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/cache_directory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the cache directory used by the package — cache_directory","text":"cache directory used rcrisp.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/cache_directory.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return the cache directory used by the package — cache_directory","text":"","code":"if (FALSE) { # interactive() cache_directory() }"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/cap_corridor.html","id":null,"dir":"Reference","previous_headings":"","what":"Cap the corridor by connecting the edge end points — cap_corridor","title":"Cap the corridor by connecting the edge end points — cap_corridor","text":"Cap corridor connecting edge end points","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/cap_corridor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cap the corridor by connecting the edge end points — cap_corridor","text":"","code":"cap_corridor(edges, method = \"shortest-path\", network = NULL)"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/cap_corridor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cap the corridor by connecting the edge end points — cap_corridor","text":"edges simple feature geometry representing corridor edges method method employed capping: shortest-path (default): find network-based shortest-path connections edge end points. direct: connect start points end points edges via straight segments network spatial network object, required method = 'shortest-path'","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/cap_corridor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cap the corridor by connecting the edge end points — cap_corridor","text":"sf::sfc_POLYGON object representing corridor","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/check_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Check cache — check_cache","title":"Check cache — check_cache","text":"warning raised cache size > 100 MB includes files older 30 days.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/check_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check cache — check_cache","text":"","code":"check_cache()"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/check_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check cache — check_cache","text":"NULL","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/check_cache.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check cache — check_cache","text":"","code":"if (FALSE) { # interactive() check_cache() }"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/check_invalid_geometry.html","id":null,"dir":"Reference","previous_headings":"","what":"Check and fix invalid geometries — check_invalid_geometry","title":"Check and fix invalid geometries — check_invalid_geometry","text":"Check fix invalid geometries","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/check_invalid_geometry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check and fix invalid geometries — check_invalid_geometry","text":"","code":"check_invalid_geometry(sf_obj)"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/check_invalid_geometry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check and fix invalid geometries — check_invalid_geometry","text":"sf_obj object class sf::sf sf::sfc","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/check_invalid_geometry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check and fix invalid geometries — check_invalid_geometry","text":"sf::sf sf::sfc object valid geometries","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/clean_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean a spatial network — clean_network","title":"Clean a spatial network — clean_network","text":"Subdivide edges adding missing nodes, (optionally) simplify network (see simplify_network()), remove pseudo-nodes, discard main connected component.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/clean_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean a spatial network — clean_network","text":"","code":"clean_network(network, simplify = TRUE)"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/clean_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean a spatial network — clean_network","text":"network network object class sfnetworks::sfnetwork simplify Whether network simplified simplify_network()","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/clean_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean a spatial network — clean_network","text":"cleaned network object class sfnetworks::sfnetwork","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/clean_network.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean a spatial network — clean_network","text":"","code":"if (FALSE) { # interactive() bucharest_osm <- get_osm_example_data() edges <- dplyr::bind_rows(bucharest_osm$streets,                           bucharest_osm$railways) network <- sfnetworks::as_sfnetwork(edges, directed = FALSE) clean_network(network) }"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/clear_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove cache files — clear_cache","title":"Remove cache files — clear_cache","text":"Remove files cache directory either given date entirely.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/clear_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove cache files — clear_cache","text":"","code":"clear_cache(before_date = NULL)"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/clear_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove cache files — clear_cache","text":"before_date Date cache files removed provided object class Date case dependent character vector accepted .Date()","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/clear_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove cache files — clear_cache","text":"List file paths removed files","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/clear_cache.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove cache files — clear_cache","text":"","code":"if (FALSE) { # interactive() # Clear all cache clear_cache()  # Clear cache before given date before_date <- as.Date(\"1-1-1999\", \"%m-%d-%Y\") clear_cache(before_date = before_date) }"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/clip_and_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Clip lines to the extent of the corridor, and select valid segment edges — clip_and_filter","title":"Clip lines to the extent of the corridor, and select valid segment edges — clip_and_filter","text":"Lines intersect river cross corridor side side considered valid segment edges. group valid segment edges cross river nearby locations, select shortest line per cluster. candidate segment edges, select ultimate set non-intersecting lines dropping longest segments intersections.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/clip_and_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clip lines to the extent of the corridor, and select valid segment edges — clip_and_filter","text":"","code":"clip_and_filter(lines, corridor, river)"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/clip_and_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clip lines to the extent of the corridor, and select valid segment edges — clip_and_filter","text":"lines Candidate segment edges simple feature geometry corridor river corridor simple feature geometry river river centerline simple feature geometry","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/clip_and_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clip lines to the extent of the corridor, and select valid segment edges — clip_and_filter","text":"Candidate segment edges object class sf::sfc_LINESTRING","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/combine_river_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine river centerline and surface — combine_river_features","title":"Combine river centerline and surface — combine_river_features","text":"Combine river centerline surface","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/combine_river_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine river centerline and surface — combine_river_features","text":"","code":"combine_river_features(river_centerline, river_surface)"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/combine_river_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine river centerline and surface — combine_river_features","text":"river_centerline River line sf::sfc_LINESTRING sf::sfc_MULTILINESTRING river_surface River surface sf::sfc_POLYGON sf::sfc_MULTIPOLYGON","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/combine_river_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine river centerline and surface — combine_river_features","text":"Combined river sf::sfc_MULTILINESTRING","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/corridor_edge.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw a corridor edge on the spatial network. — corridor_edge","title":"Draw a corridor edge on the spatial network. — corridor_edge","text":"corridor edge drawn network shortest-path link start- end-point. weights shortest-path problem set account ) network edge lengths, b) distance initial target edge geometry, c) excluded area corridor edges aimed go . procedure iterative, excluded area accounted first iteration. identified corridor edge used target edge following iteration, goal prioritising \"straightening\" edge (overlap excluded area allowed).","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/corridor_edge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw a corridor edge on the spatial network. — corridor_edge","text":"","code":"corridor_edge(   network,   end_points,   target_edge,   exclude_area = NULL,   max_iterations = 10 )"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/corridor_edge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw a corridor edge on the spatial network. — corridor_edge","text":"network spatial network used delineation end_points Target start- end-point target_edge Target edge geometry follow delineation exclude_area Region aim exclude delineation max_iterations Maximum number iterations employed refine corridor edges","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/corridor_edge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw a corridor edge on the spatial network. — corridor_edge","text":"sf::sfc_LINESTRING object representing edge","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/corridor_end_points.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the corridor end points. — corridor_end_points","title":"Find the corridor end points. — corridor_end_points","text":"Determine extremes (end points) river corridor using network built river center line features (see build_river_network() spatial network used delineation. end points selected two furthest river crossings spatial network connect sub-networks river sides.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/corridor_end_points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the corridor end points. — corridor_end_points","text":"","code":"corridor_end_points(river_network, spatial_network, regions)"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/corridor_end_points.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the corridor end points. — corridor_end_points","text":"river_network sfnetworks::sfnetwork object representing river centerline spatial_network sfnetworks::sfnetwork object representing spatial network used delineation regions simple feature geometry representing two river sides","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/corridor_end_points.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the corridor end points. — corridor_end_points","text":"sf::sfc_POINT geometry including pair points","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/default_stac_dem.html","id":null,"dir":"Reference","previous_headings":"","what":"Default STAC collection — default_stac_dem","title":"Default STAC collection — default_stac_dem","text":"Endpoint collection ID default STAC collection access digital elevation model (DEM) data. global Copernicus DEM 30 dataset hosted AWS, listed EarthSearch STAC API endpoint. Note AWS credentials need set order access data (catalog). References: EarthSearch STAC API Copernicus DEM AWS Copernicus DEM datasets Data license","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/default_stac_dem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default STAC collection — default_stac_dem","text":"","code":"default_stac_dem"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/default_stac_dem.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Default STAC collection — default_stac_dem","text":"object class list length 2.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/delineate.html","id":null,"dir":"Reference","previous_headings":"","what":"Delineate a corridor around a river — delineate","title":"Delineate a corridor around a river — delineate","text":"Delineate corridor around river","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/delineate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delineate a corridor around a river — delineate","text":"","code":"delineate(   city_name,   river_name,   crs = NULL,   network_buffer = NULL,   buildings_buffer = NULL,   corridor_init = \"valley\",   dem = NULL,   dem_buffer = 2500,   max_iterations = 10,   capping_method = \"shortest-path\",   angle_threshold = 100,   corridor = TRUE,   segments = FALSE,   riverspace = FALSE,   force_download = FALSE,   ... )"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/delineate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delineate a corridor around a river — delineate","text":"city_name character vector length one river_name character vector length one crs projected Coordinate Reference System (CRS) use. provided, suitable Universal Transverse Mercator (UTM) CRS selected network_buffer Add buffer (integer meters) around river retrieve additional data (streets, railways, etc.). Default 3000 m. buildings_buffer Add buffer (integer meters) around river retrieve additional data (buildings). Default 100 m. corridor_init estimate initial guess river corridor. can take following values: \"valley\": use river valley boundary, estimated Digital Elevation Model (DEM) (info see delineate_valley()) numeric integer: use buffer region given size (meters) around river centerline sf::sf sf::sfc object: use given input geometry dem Digital elevation model (DEM) region (used corridor_init \"valley\") dem_buffer Size buffer region (meters) around river retrieve DEM  (used corridor_init \"valley\" dem NULL). max_iterations Maximum number iterations employed refine corridor edges (see corridor_edge()). capping_method method employed connect corridor edge end points (.e., \"cap\" corridor), character vector length one. See cap_corridor() available methods. angle_threshold network edges forming angles threshold (degrees) considered forming segment edges. See delineate_segments() rcoins::stroke(). used segments TRUE. corridor Whether carry corridor delineation segments Whether carry corridor segmentation riverspace Whether carry riverspace delineation force_download Download data even cached data available ... Additional (optional) input arguments retrieving DEM dataset (see get_dem()). relevant corridor_init \"valley\" dem NULL","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/delineate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delineate a corridor around a river — delineate","text":"list corridor, segments, riverspace geometries sf::sfc_POLYGON objects.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/delineate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delineate a corridor around a river — delineate","text":"","code":"if (FALSE) { # interactive() # Set parameters city <- \"Bucharest\" river <- \"Dâmbovița\"  # Delineate with defaults delineate(city, river)  # Use custom CRS delineate(city, river, crs = \"EPSG:31600\")  # National projected CRS  # Use custom network buffer delineate(city, river, network_buffer = 3500)  # Use custom buildings buffer delineate(city, river, buildings_buffer = 150, riverspace = TRUE)  # Provide DEM as input bucharest_dem <- get_dem_example_data() delineate(city, river, dem = bucharest_dem) }"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/delineate_corridor.html","id":null,"dir":"Reference","previous_headings":"","what":"Delineate a river corridor on a spatial network — delineate_corridor","title":"Delineate a river corridor on a spatial network — delineate_corridor","text":"corridor edges two river banks drawn provided spatial network starting initial guess corridor (based e.g. river valley).","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/delineate_corridor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delineate a river corridor on a spatial network — delineate_corridor","text":"","code":"delineate_corridor(   network,   river,   corridor_init = 1000,   max_width = 3000,   max_iterations = 10,   capping_method = \"shortest-path\" )"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/delineate_corridor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delineate a river corridor on a spatial network — delineate_corridor","text":"network spatial network class sfnetworks::sfnetwork used delineation. Required, default. river (MULTI)LINESTRING simple feature geometry class sf::sf sf::sfc representing river centerline. Required, default. corridor_init estimate initial guess river corridor. can take following values: numeric integer: use buffer region given size (meters, positive, unrestricted) around river centerline sf::sf sf::sfc object: use given input geometry max_width positive number representing (approximate) maximum width corridor meters. upper limit unrestricted. spatial network trimmed buffer region size around river. max_iterations positive integer greater 0, upper limit unrestricted, representing maximum number iterations employed refine corridor edges (see corridor_edge()). capping_method Case-insensitive character vector length 1 method employed connect corridor edge end points (.e. \"cap\" corridor). See cap_corridor() available methods.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/delineate_corridor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delineate a river corridor on a spatial network — delineate_corridor","text":"simple feature geometry class sf::sfc_POLYGON representing river corridor","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/delineate_corridor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delineate a river corridor on a spatial network — delineate_corridor","text":"","code":"if (FALSE) { # interactive() bucharest_osm <- get_osm_example_data() streets <- bucharest_osm$streets railways <- bucharest_osm$railways river <- bucharest_osm$river_centerline  # Delineate with default values network <- rbind(streets, railways) |> as_network() delineate_corridor(network = network, river = river)  # Delineate with user-specified parameters bucharest_dem <- get_dem_example_data() corridor_init <- delineate_valley(dem = bucharest_dem, river = river) delineate_corridor(network = network, river = river,                    corridor_init = corridor_init,                    max_width = 4000, max_iterations = 5,                    capping_method = \"direct\") }"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/delineate_riverspace.html","id":null,"dir":"Reference","previous_headings":"","what":"Delineate the space surrounding a river — delineate_riverspace","title":"Delineate the space surrounding a river — delineate_riverspace","text":"Delineate space surrounding river","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/delineate_riverspace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delineate the space surrounding a river — delineate_riverspace","text":"","code":"delineate_riverspace(   river,   occluders = NULL,   density = 1/50,   ray_num = 40,   ray_length = 100 )"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/delineate_riverspace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delineate the space surrounding a river — delineate_riverspace","text":"river List river surface centerline occluders Geometry occluders density Density viewpoints ray_num Number rays numeric vector length one ray_length Length rays meters numeric vector length one","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/delineate_riverspace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delineate the space surrounding a river — delineate_riverspace","text":"Riverspace object class sf::sfc_POLYGON","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/delineate_riverspace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delineate the space surrounding a river — delineate_riverspace","text":"","code":"if (FALSE) { # interactive() bucharest_osm <- get_osm_example_data() delineate_riverspace(bucharest_osm$river_surface, bucharest_osm$buildings) }"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/delineate_segments.html","id":null,"dir":"Reference","previous_headings":"","what":"Split a river corridor into segments — delineate_segments","title":"Split a river corridor into segments — delineate_segments","text":"Segments defined corridor subregions separated river-crossing transversal lines form continuous strokes network.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/delineate_segments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split a river corridor into segments — delineate_segments","text":"","code":"delineate_segments(corridor, network, river, angle_threshold = 100)"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/delineate_segments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split a river corridor into segments — delineate_segments","text":"corridor river corridor simple feature geometry class sfc_POLYGON network spatial network class sfnetwork used segmentation river river centerline simple feature geometry class sf::sf sf::sfc angle_threshold consider angles threshold (degrees) form continuous strokes network. value can range 0 180, default set 100. See rcoins::stroke() details.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/delineate_segments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split a river corridor into segments — delineate_segments","text":"Segment polygons simple feature geometry class sf::sfc_POLYGON","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/delineate_segments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split a river corridor into segments — delineate_segments","text":"","code":"if (FALSE) { # interactive() bucharest_osm <- get_osm_example_data() corridor <- bucharest_dambovita$corridor network <- rbind(bucharest_osm$streets, bucharest_osm$railways) |>   as_network() river <- bucharest_osm$river_centerline delineate_segments(corridor, network, river) }"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/delineate_valley.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the river valley from the DEM — delineate_valley","title":"Extract the river valley from the DEM — delineate_valley","text":"slope digital elevation model (DEM) used friction (cost) surface compute cost distance grid cell raster river. characteristic value (default: mean) cost distance distribution region surrounding river (default: buffer region 2 km) calculated, used threshold cost-distance surface. resulting area \"polygonized\" obtain valley boundary simple feature geometry.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/delineate_valley.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the river valley from the DEM — delineate_valley","text":"","code":"delineate_valley(dem, river)"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/delineate_valley.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the river valley from the DEM — delineate_valley","text":"dem SpatRaster object digital elevation model region river object class sf::sf sf::sfc representing river","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/delineate_valley.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the river valley from the DEM — delineate_valley","text":"River valley simple feature geometry class sfc_MULTIPOLYGON","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/delineate_valley.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the river valley from the DEM — delineate_valley","text":"","code":"if (FALSE) { # interactive() bucharest_osm <- get_osm_example_data() bucharest_dem <- get_dem_example_data() delineate_valley(bucharest_dem, bucharest_osm$river_centerline) }"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/filter_clusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster the river crossings and select the shortest crossing per cluster — filter_clusters","title":"Cluster the river crossings and select the shortest crossing per cluster — filter_clusters","text":"Create groups edges crossing river nearby locations, using density-based clustering method (DBSCAN). make sure edges representing e.g. different lanes street treated part crossing. cluster, select shortest edge.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/filter_clusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster the river crossings and select the shortest crossing per cluster — filter_clusters","text":"","code":"filter_clusters(crossings, river, eps = 100)"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/filter_clusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster the river crossings and select the shortest crossing per cluster — filter_clusters","text":"crossings Crossing edge geometries simple feature object river river geometry simple feature object eps DBSCAN parameter referring size (radius) distance neighborhood. approximate distance edges want consider single river crossing","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/filter_clusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster the river crossings and select the shortest crossing per cluster — filter_clusters","text":"object class sf::sfc_LINESTRING including shortest edge per cluster","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/filter_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset a network keeping the components that intersect a target geometry. — filter_network","title":"Subset a network keeping the components that intersect a target geometry. — filter_network","text":"subsetting results multiple disconnected components, keep main one.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/filter_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset a network keeping the components that intersect a target geometry. — filter_network","text":"","code":"filter_network(network, target, elements = \"nodes\")"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/filter_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset a network keeping the components that intersect a target geometry. — filter_network","text":"network spatial network object class sfnetworks::sfnetwork target target geometry elements elements network filter. can \"nodes\" \"edges\"","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/filter_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset a network keeping the components that intersect a target geometry. — filter_network","text":"spatial network object class sfnetworks::sfnetwork","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/find_intersections.html","id":null,"dir":"Reference","previous_headings":"","what":"Find intersections between the edges of two networks — find_intersections","title":"Find intersections between the edges of two networks — find_intersections","text":"Find intersections edges two networks","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/find_intersections.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find intersections between the edges of two networks — find_intersections","text":"","code":"find_intersections(network_1, network_2)"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/find_intersections.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find intersections between the edges of two networks — find_intersections","text":"network_1, network_2 two spatial network objects","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/find_intersections.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find intersections between the edges of two networks — find_intersections","text":"object class sf::sfc","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/flatten_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Flatten a network by adding points at apparent intersections — flatten_network","title":"Flatten a network by adding points at apparent intersections — flatten_network","text":"crossing edges identified, points intersections injected within edge geometries. Note injected points converted network nodes (can achieved via sfnetworks' sfnetworks::to_spatial_subdivision(), part tasks included clean_network().","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/flatten_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flatten a network by adding points at apparent intersections — flatten_network","text":"","code":"flatten_network(network)"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/flatten_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flatten a network by adding points at apparent intersections — flatten_network","text":"network network object class sfnetworks::sfnetwork","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/flatten_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flatten a network by adding points at apparent intersections — flatten_network","text":"sfnetworks::sfnetwork object additional points intersections","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/flatten_network.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Flatten a network by adding points at apparent intersections — flatten_network","text":"functionality similar sfnetworks' sfnetworks::st_network_blend(), case external point injected closest edge.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/flatten_network.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flatten a network by adding points at apparent intersections — flatten_network","text":"","code":"if (FALSE) { # interactive() bucharest_osm <- get_osm_example_data() edges <- dplyr::bind_rows(bucharest_osm$streets,                           bucharest_osm$railways) network <- sfnetworks::as_sfnetwork(edges, directed = FALSE) flatten_network(network) }"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_cd_char.html","id":null,"dir":"Reference","previous_headings":"","what":"Get characteristic value of distribution of cost distance — get_cd_char","title":"Get characteristic value of distribution of cost distance — get_cd_char","text":"Get characteristic value distribution cost distance","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_cd_char.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get characteristic value of distribution of cost distance — get_cd_char","text":"","code":"get_cd_char(cd, method = \"mean\")"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_cd_char.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get characteristic value of distribution of cost distance — get_cd_char","text":"cd cost distance raster data method function used derive caracteristic value (mean)","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_cd_char.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get characteristic value of distribution of cost distance — get_cd_char","text":"characteristic value cd raster","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_corridor_edges.html","id":null,"dir":"Reference","previous_headings":"","what":"Split corridor along the river to find edges on the two banks — get_corridor_edges","title":"Split corridor along the river to find edges on the two banks — get_corridor_edges","text":"Split corridor along river find edges two banks","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_corridor_edges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split corridor along the river to find edges on the two banks — get_corridor_edges","text":"","code":"get_corridor_edges(corridor, river)"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_corridor_edges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split corridor along the river to find edges on the two banks — get_corridor_edges","text":"corridor river corridor simple feature geometry river river centerline simple feature geometry","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_corridor_edges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split corridor along the river to find edges on the two banks — get_corridor_edges","text":"Corridor edges object class sf::sfc_LINESTRING","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_cost_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive cost distance function from masked slope — get_cost_distance","title":"Derive cost distance function from masked slope — get_cost_distance","text":"Derive cost distance function masked slope","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_cost_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive cost distance function from masked slope — get_cost_distance","text":"","code":"get_cost_distance(slope, river, target = 0)"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_cost_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive cost distance function from masked slope — get_cost_distance","text":"slope raster slope data river vector data river target value cost distance calculation","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_cost_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derive cost distance function from masked slope — get_cost_distance","text":"raster cost distance","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_dem.html","id":null,"dir":"Reference","previous_headings":"","what":"Access digital elevation model (DEM) for a given region — get_dem","title":"Access digital elevation model (DEM) for a given region — get_dem","text":"Access digital elevation model (DEM) given region","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_dem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access digital elevation model (DEM) for a given region — get_dem","text":"","code":"get_dem(   bb,   dem_source = \"STAC\",   stac_endpoint = NULL,   stac_collection = NULL,   crs = NULL,   force_download = FALSE )"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_dem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access digital elevation model (DEM) for a given region — get_dem","text":"bb bounding box, provided either matrix (rows \"x\", \"y\", columns \"min\", \"max\") vector (\"xmin\", \"ymin\", \"xmax\", \"ymax\"), lat/lon coordinates (WGS84 coordinate reference system) class bbox dem_source Source DEM: \"STAC\" (default), DEM tiles searched SpatioTemporal Asset Catalog (STAC) end point, accessed mosaicked area interest stac_endpoint URL STAC API endpoint (used dem_source \"STAC\"). info, see get_stac_asset_urls() stac_collection Identifier STAC collection queried (used dem_source \"STAC\"). info, see get_stac_asset_urls() crs Coordinate reference system (CRS) transform DEM force_download Download data even cached data available","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_dem.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Access digital elevation model (DEM) for a given region — get_dem","text":"DEM terra SpatRaster object","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_dem.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Access digital elevation model (DEM) for a given region — get_dem","text":"","code":"if (FALSE) { # interactive() # Get DEM with default values bb <- get_osm_bb(\"Bucharest\") crs <- 31600  # National projected CRS  # Get DEM with default values get_dem(bb)  # Get DEM from custom STAC endpoint get_dem(bb,         stac_endpoint = \"some endpoint\",         stac_collection = \"some collection\")  # Specify CRS get_dem(bb, crs = crs) }"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_dem_cache_filepath.html","id":null,"dir":"Reference","previous_headings":"","what":"Get file path where to cache digital elevation model (DEM) data — get_dem_cache_filepath","title":"Get file path where to cache digital elevation model (DEM) data — get_dem_cache_filepath","text":"function returns file path serialize terra::SpatRaster object representing DEM retrieved set tiles reachable given URLs, cropped merged given bounding box. directory used one returned cache_directory().","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_dem_cache_filepath.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get file path where to cache digital elevation model (DEM) data — get_dem_cache_filepath","text":"","code":"get_dem_cache_filepath(tile_urls, bbox)"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_dem_cache_filepath.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get file path where to cache digital elevation model (DEM) data — get_dem_cache_filepath","text":"tile_urls URL-paths reach DEM tiles bbox bounding box","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_dem_cache_filepath.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get file path where to cache digital elevation model (DEM) data — get_dem_cache_filepath","text":"character string representing file path","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_dem_example_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get example DEM data — get_dem_example_data","title":"Get example DEM data — get_dem_example_data","text":"function retrieves example Digital Elevation Model (DEM) data Zenodo data repository, can used examples tests. code used generate example dataset available https://github.com/CityRiverSpaces/CRiSpExampleData. Note example dataset cached locally, subsequent calls function can load example data disk without re-download data.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_dem_example_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get example DEM data — get_dem_example_data","text":"","code":"get_dem_example_data(force_download = FALSE)"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_dem_example_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get example DEM data — get_dem_example_data","text":"force_download Download data even cached data available","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_dem_example_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get example DEM data — get_dem_example_data","text":"object class terra::SpatRaster containing DEM data.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_dem_example_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get example DEM data — get_dem_example_data","text":"","code":"if (FALSE) { # interactive() get_dem_example_data(force_download = TRUE) }"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_example_cache_filepath.html","id":null,"dir":"Reference","previous_headings":"","what":"Get file path where to cache example data files — get_example_cache_filepath","title":"Get file path where to cache example data files — get_example_cache_filepath","text":"function returns file path store example data files retrieved data repository (see get_osm_example_data() get_dem_example_data()). directory used one returned cache_directory().","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_example_cache_filepath.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get file path where to cache example data files — get_example_cache_filepath","text":"","code":"get_example_cache_filepath(filename)"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_example_cache_filepath.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get file path where to cache example data files — get_example_cache_filepath","text":"filename name file retrieved data repository","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_example_cache_filepath.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get file path where to cache example data files — get_example_cache_filepath","text":"character string representing file path","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_example_data_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve an example data file from the data repository — get_example_data_file","title":"Retrieve an example data file from the data repository — get_example_data_file","text":"Store file cache directory, subsequent reuse.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_example_data_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve an example data file from the data repository — get_example_data_file","text":"","code":"get_example_data_file(filename, force_download = FALSE)"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_example_data_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve an example data file from the data repository — get_example_data_file","text":"force_download Download data even cached data available","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_example_data_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve an example data file from the data repository — get_example_data_file","text":"character string representing file path","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_intersecting_edges.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify network edges that are intersecting a geometry — get_intersecting_edges","title":"Identify network edges that are intersecting a geometry — get_intersecting_edges","text":"Identify network edges intersecting geometry","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_intersecting_edges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify network edges that are intersecting a geometry — get_intersecting_edges","text":"","code":"get_intersecting_edges(network, geometry, index = FALSE)"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_intersecting_edges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify network edges that are intersecting a geometry — get_intersecting_edges","text":"network spatial network object class sfnetworks::sfnetwork geometry object class sf::sfc index Whether return indices matchin edges geometries","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_intersecting_edges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify network edges that are intersecting a geometry — get_intersecting_edges","text":"Indices geometries edges intersecting given geometry class sf::sfc_LINESTRING","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_osm_bb.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the bounding box of a city — get_osm_bb","title":"Get the bounding box of a city — get_osm_bb","text":"Get bounding box city","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_osm_bb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the bounding box of a city — get_osm_bb","text":"","code":"get_osm_bb(city_name)"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_osm_bb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the bounding box of a city — get_osm_bb","text":"city_name character vector length one","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_osm_bb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the bounding box of a city — get_osm_bb","text":"bbox object bounding box city","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_osm_bb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the bounding box of a city — get_osm_bb","text":"","code":"if (FALSE) { # interactive() get_osm_bb(city_name = \"Bucharest\") }"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_osm_buildings.html","id":null,"dir":"Reference","previous_headings":"","what":"Get OpenStreetMap buildings — get_osm_buildings","title":"Get OpenStreetMap buildings — get_osm_buildings","text":"Get buildings OpenStreetMap within given buffer around river.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_osm_buildings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get OpenStreetMap buildings — get_osm_buildings","text":"","code":"get_osm_buildings(aoi, crs = NULL, force_download = FALSE)"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_osm_buildings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get OpenStreetMap buildings — get_osm_buildings","text":"aoi Area interest sf object bbox crs Coordinate reference system EPSG code force_download Download data even cached data available","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_osm_buildings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get OpenStreetMap buildings — get_osm_buildings","text":"object class sf::sfc_POLYGON","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_osm_buildings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get OpenStreetMap buildings — get_osm_buildings","text":"","code":"if (FALSE) { # interactive() bb <- get_osm_bb(\"Bucharest\") crs <- get_utm_zone(bb) get_osm_buildings(aoi = bb, crs = crs) }"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_osm_city_boundary.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the city boundary from OpenStreetMap — get_osm_city_boundary","title":"Get the city boundary from OpenStreetMap — get_osm_city_boundary","text":"function retrieves city boundary OpenStreetMap based bounding box OSM tags \"place:city\" \"boundary:administrative\". result filtered city name.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_osm_city_boundary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the city boundary from OpenStreetMap — get_osm_city_boundary","text":"","code":"get_osm_city_boundary(   bb,   city_name,   crs = NULL,   multiple = FALSE,   force_download = FALSE )"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_osm_city_boundary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the city boundary from OpenStreetMap — get_osm_city_boundary","text":"bb Bounding box class bbox city_name case-sensitive character vector length 1 name city crs Coordinate reference system EPSG code multiple logical indicating multiple city boundaries returned. default, first one returned. force_download Download data even cached data available","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_osm_city_boundary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the city boundary from OpenStreetMap — get_osm_city_boundary","text":"object class sf::sfc_POLYGON sf::sfc_MULTIPOLYGON city boundary","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_osm_city_boundary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the city boundary from OpenStreetMap — get_osm_city_boundary","text":"","code":"if (FALSE) { # interactive() bb <- get_osm_bb(\"Bucharest\") crs <- get_utm_zone(bb) get_osm_city_boundary(bb = bb, city_name = \"Bucharest\", crs = crs) }"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_osm_example_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get example OSM data — get_osm_example_data","title":"Get example OSM data — get_osm_example_data","text":"function retrieves example OpenStreetMap (OSM) data Zenodo data repository, can used examples tests. code used generate example dataset available https://github.com/CityRiverSpaces/CRiSpExampleData. Note example dataset cached locally, subsequent calls function can load example data disk without re-download data.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_osm_example_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get example OSM data — get_osm_example_data","text":"","code":"get_osm_example_data(force_download = FALSE)"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_osm_example_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get example OSM data — get_osm_example_data","text":"force_download Download data even cached data available","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_osm_example_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get example OSM data — get_osm_example_data","text":"list sf objects containing OSM data sf::sfc objects.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_osm_example_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get example OSM data — get_osm_example_data","text":"","code":"if (FALSE) { # interactive() get_osm_example_data(force_download = TRUE) }"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_osm_railways.html","id":null,"dir":"Reference","previous_headings":"","what":"Get OpenStreetMap railways — get_osm_railways","title":"Get OpenStreetMap railways — get_osm_railways","text":"Get OpenStreetMap railways","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_osm_railways.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get OpenStreetMap railways — get_osm_railways","text":"","code":"get_osm_railways(   aoi,   crs = NULL,   railway_values = \"rail\",   force_download = FALSE )"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_osm_railways.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get OpenStreetMap railways — get_osm_railways","text":"aoi Area interest sf object bbox crs numeric vector length one EPSG code CRS railway_values case-insensitive character vector railway values retrieve. force_download Download data even cached data available","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_osm_railways.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get OpenStreetMap railways — get_osm_railways","text":"object class sf::sfc_LINESTRING","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_osm_railways.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get OpenStreetMap railways — get_osm_railways","text":"","code":"if (FALSE) { # interactive() bb <- get_osm_bb(\"Bucharest\") crs <- get_utm_zone(bb) get_osm_railways(aoi = bb, crs = crs) }"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_osm_river.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the river centreline and surface from OpenStreetMap — get_osm_river","title":"Get the river centreline and surface from OpenStreetMap — get_osm_river","text":"Get river centreline surface OpenStreetMap","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_osm_river.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the river centreline and surface from OpenStreetMap — get_osm_river","text":"","code":"get_osm_river(bb, river_name, crs = NULL, force_download = FALSE)"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_osm_river.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the river centreline and surface from OpenStreetMap — get_osm_river","text":"bb Bounding box class bbox river_name name river character vector length 1, case-sensitive. crs Coordinate reference system EPSG code force_download Download data even cached data available","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_osm_river.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the river centreline and surface from OpenStreetMap — get_osm_river","text":"list river centreline object class sf::sfc_LINESTRING sf::sfc_MULTILINESTRING river surface class sf::sfc_POLYGON sf::sfc_MULTIPOLYGON.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_osm_river.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the river centreline and surface from OpenStreetMap — get_osm_river","text":"","code":"if (FALSE) { # interactive() bb <- get_osm_bb(\"Bucharest\") crs <- get_utm_zone(bb) get_osm_river(bb = bb, river_name = \"Dâmbovița\", crs = crs,               force_download = FALSE) }"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_osm_streets.html","id":null,"dir":"Reference","previous_headings":"","what":"Get OpenStreetMap streets — get_osm_streets","title":"Get OpenStreetMap streets — get_osm_streets","text":"Get OpenStreetMap streets","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_osm_streets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get OpenStreetMap streets — get_osm_streets","text":"","code":"get_osm_streets(aoi, crs = NULL, highway_values = NULL, force_download = FALSE)"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_osm_streets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get OpenStreetMap streets — get_osm_streets","text":"aoi Area interest sf object bbox. Required, default. crs numeric vector length one EPSG code CRS highway_values character vector highway values retrieve. left NULL, function retrieves following values: \"motorway\", \"trunk\", \"primary\", \"secondary\", \"tertiary\" force_download Download data even cached data available","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_osm_streets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get OpenStreetMap streets — get_osm_streets","text":"object class sf::sfc_LINESTRING","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_osm_streets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get OpenStreetMap streets — get_osm_streets","text":"","code":"if (FALSE) { # interactive() # Set parameters bb <- get_osm_bb(\"Bucharest\") crs <- 31600  # National projected CRS  # Get streets with default values get_osm_streets(aoi = bb, crs = crs)  # Specify street categories to be retrieved get_osm_streets(aoi = bb, crs = crs, highway_values = \"primary\")  # Ensure that data is not retrieved from cache get_osm_streets(aoi = bb, crs = crs, force_download = FALSE) }"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_osmdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve OpenStreetMap data for a given location — get_osmdata","title":"Retrieve OpenStreetMap data for a given location — get_osmdata","text":"Retrieve OpenStreetMap data given location, including city boundary, river centreline surface, streets, railways, buildings","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_osmdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve OpenStreetMap data for a given location — get_osmdata","text":"","code":"get_osmdata(   city_name,   river_name,   network_buffer = NULL,   buildings_buffer = NULL,   city_boundary = TRUE,   crs = NULL,   force_download = FALSE )"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_osmdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve OpenStreetMap data for a given location — get_osmdata","text":"city_name name city character vector length 1, case-sensitive. Required, default. river_name name river character vector length 1, case-sensitive. Required, default. network_buffer Buffer distance meters around river get streets railways, default 0 means network data downloaded buildings_buffer Buffer distance meters around river get buildings, default 0 means buildings data downloaded city_boundary logical indicating city boundary retrieved. Default TRUE. crs integer character vector length one EPSG code projection. CRS specified, default UTM zone city. force_download Download data even cached data available","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_osmdata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve OpenStreetMap data for a given location — get_osmdata","text":"list retrieved OpenStreetMap data sets given location, objects class sf::sfc","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_osmdata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve OpenStreetMap data for a given location — get_osmdata","text":"","code":"if (FALSE) { # interactive() # Set parameters city <- \"Bucharest\" river <- \"Dâmbovița\" crs <- \"EPSG:31600\"  # National projected CRS  # Get OSM data with defaults get_osmdata(city_name = city, river_name = river)  # Get OSM data without city boundary get_osmdata(city_name = city, river_name = river, city_boundary = FALSE)  # Use custom network buffer to get streets and railways get_osmdata(city_name = city, river_name = river, network_buffer = 3500)  # Use custom buffer to get buildings get_osmdata(city_name = city, river_name = river, buildings_buffer = 150)  # Use custom CRS get_osmdata(city_name = city, river_name = river, crs = crs)  # Avoid getting OSM data from cache get_osmdata(city_name = city, river_name = river, force_download = TRUE) }"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_osmdata_cache_filepath.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the file path where to cache results of an Overpass API query — get_osmdata_cache_filepath","title":"Get the file path where to cache results of an Overpass API query — get_osmdata_cache_filepath","text":"function returns file path serialize osdata_sf object given key:value pair bounding box. directory used one returned cache_directory().","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_osmdata_cache_filepath.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the file path where to cache results of an Overpass API query — get_osmdata_cache_filepath","text":"","code":"get_osmdata_cache_filepath(key, value, bbox)"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_osmdata_cache_filepath.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the file path where to cache results of an Overpass API query — get_osmdata_cache_filepath","text":"key character string key filter data value character string value filter data bbox bounding box","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_osmdata_cache_filepath.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the file path where to cache results of an Overpass API query — get_osmdata_cache_filepath","text":"character string representing file path","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_river_aoi.html","id":null,"dir":"Reference","previous_headings":"","what":"Get an area of interest (AoI) around a river, cropping to the bounding box of a city — get_river_aoi","title":"Get an area of interest (AoI) around a river, cropping to the bounding box of a city — get_river_aoi","text":"Get area interest (AoI) around river, cropping bounding box city","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_river_aoi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get an area of interest (AoI) around a river, cropping to the bounding box of a city — get_river_aoi","text":"","code":"get_river_aoi(river, city_bbox, buffer_distance)"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_river_aoi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get an area of interest (AoI) around a river, cropping to the bounding box of a city — get_river_aoi","text":"river list river centreline surface geometries city_bbox Bounding box class bbox around city buffer_distance positive number representing buffer size around river meters. upper limit unrestricted.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_river_aoi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get an area of interest (AoI) around a river, cropping to the bounding box of a city — get_river_aoi","text":"sf::sfc_POLYGON object lat/lon coordinates","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_river_aoi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get an area of interest (AoI) around a river, cropping to the bounding box of a city — get_river_aoi","text":"","code":"if (FALSE) { # interactive() bb <- get_osm_bb(\"Bucharest\") river <- get_osm_river(bb, \"Dâmbovița\") get_river_aoi(river = river, city_bbox = bb, buffer_distance = 100) }"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_river_banks.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw the regions corresponding to the two river banks — get_river_banks","title":"Draw the regions corresponding to the two river banks — get_river_banks","text":"constructed single-sided buffers around river geometry (see river_buffer() implementation refinement steps).","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_river_banks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw the regions corresponding to the two river banks — get_river_banks","text":"","code":"get_river_banks(river, width)"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_river_banks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw the regions corresponding to the two river banks — get_river_banks","text":"river River spatial features provided sfnetworks::sfnetwork sf::sf/sf::sfc object. width Width regions","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_river_banks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw the regions corresponding to the two river banks — get_river_banks","text":"sf::sfc_POLYGON object two polygon features","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_slope.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive slope as percentage from DEM — get_slope","title":"Derive slope as percentage from DEM — get_slope","text":"makes use terrain function terra package","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_slope.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive slope as percentage from DEM — get_slope","text":"","code":"get_slope(dem)"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_slope.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive slope as percentage from DEM — get_slope","text":"dem raster data dem","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_slope.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derive slope as percentage from DEM — get_slope","text":"raster derived slope dem extent","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_stac_asset_urls.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the URLs of all the assets intersecting a bbox from a STAC API — get_stac_asset_urls","title":"Retrieve the URLs of all the assets intersecting a bbox from a STAC API — get_stac_asset_urls","text":"Retrieve URLs assets intersecting bbox STAC API","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_stac_asset_urls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the URLs of all the assets intersecting a bbox from a STAC API — get_stac_asset_urls","text":"","code":"get_stac_asset_urls(bb, endpoint = NULL, collection = NULL)"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_stac_asset_urls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve the URLs of all the assets intersecting a bbox from a STAC API — get_stac_asset_urls","text":"bb bounding box, provided either matrix (rows \"x\", \"y\", columns \"min\", \"max\") vector (\"xmin\", \"ymin\", \"xmax\", \"ymax\"), lat/lon coordinates (WGS84 coordinate referece system) class bbox endpoint URL STAC API endpoint. provided together stac_collection, leave blank use defaults (see default_stac_dem) collection Identifier STAC collection queried. provided together stac_endpoint, leave blank use defaults (see default_stac_dem)","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_stac_asset_urls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the URLs of all the assets intersecting a bbox from a STAC API — get_stac_asset_urls","text":"list URLs assets collection overlapping specified bounding box","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_stac_asset_urls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve the URLs of all the assets intersecting a bbox from a STAC API — get_stac_asset_urls","text":"","code":"if (FALSE) { # interactive() bb <- get_osm_bb(\"Bucharest\") get_stac_asset_urls(bb)  # Use non-default STAC API get_stac_asset_urls(bb,                     endpoint = \"some endpoint\",                     collection = \"some collection\") }"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_utm_zone.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the UTM zone of a spatial object — get_utm_zone","title":"Get the UTM zone of a spatial object — get_utm_zone","text":"Get UTM zone spatial object","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_utm_zone.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the UTM zone of a spatial object — get_utm_zone","text":"","code":"get_utm_zone(x)"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_utm_zone.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the UTM zone of a spatial object — get_utm_zone","text":"x Object class accepted as_bbox()","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_utm_zone.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the UTM zone of a spatial object — get_utm_zone","text":"EPSG code UTM zone","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_utm_zone.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the UTM zone of a spatial object — get_utm_zone","text":"","code":"# Get EPSG code for UTM zone of Bucharest bb <- get_osm_bb(\"Bucharest\") get_utm_zone(bb) #> [1] 32635"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_valley_polygon.html","id":null,"dir":"Reference","previous_headings":"","what":"Create vector/polygon representation of valley without holes from raster mask — get_valley_polygon","title":"Create vector/polygon representation of valley without holes from raster mask — get_valley_polygon","text":"Create vector/polygon representation valley without holes raster mask","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_valley_polygon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create vector/polygon representation of valley without holes from raster mask — get_valley_polygon","text":"","code":"get_valley_polygon(valley_mask)"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_valley_polygon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create vector/polygon representation of valley without holes from raster mask — get_valley_polygon","text":"valley_mask raster mask valley pixels","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_valley_polygon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create vector/polygon representation of valley without holes from raster mask — get_valley_polygon","text":"(multi)polygon representation valley area simple feature geometry without holes","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_valley_polygon_no_hole.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove possible holes from valley geometry — get_valley_polygon_no_hole","title":"Remove possible holes from valley geometry — get_valley_polygon_no_hole","text":"Remove possible holes valley geometry","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_valley_polygon_no_hole.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove possible holes from valley geometry — get_valley_polygon_no_hole","text":"","code":"get_valley_polygon_no_hole(valley_polygon)"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_valley_polygon_no_hole.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove possible holes from valley geometry — get_valley_polygon_no_hole","text":"valley_polygon Geometry valley object class sf::sfc","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_valley_polygon_no_hole.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove possible holes from valley geometry — get_valley_polygon_no_hole","text":"(multi)polygon geometry valley","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_valley_polygon_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Create vector/polygon representation of valley raster mask — get_valley_polygon_raw","title":"Create vector/polygon representation of valley raster mask — get_valley_polygon_raw","text":"Create vector/polygon representation valley raster mask","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_valley_polygon_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create vector/polygon representation of valley raster mask — get_valley_polygon_raw","text":"","code":"get_valley_polygon_raw(valley_mask)"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_valley_polygon_raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create vector/polygon representation of valley raster mask — get_valley_polygon_raw","text":"valley_mask raster mask valley pixels","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/get_valley_polygon_raw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create vector/polygon representation of valley raster mask — get_valley_polygon_raw","text":"polygon representation valley area object class sf::sfc","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/initial_edges.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify the initial edges of the river corridor — initial_edges","title":"Identify the initial edges of the river corridor — initial_edges","text":"defined splitting initial corridor boundary sub-regions river forms area interest","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/initial_edges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify the initial edges of the river corridor — initial_edges","text":"","code":"initial_edges(corridor_initial, regions)"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/initial_edges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify the initial edges of the river corridor — initial_edges","text":"corridor_initial simple feature geometry representing area initial corridor regions simple feature geometry representing sub-regions formed cutting area interest along river","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/initial_edges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify the initial edges of the river corridor — initial_edges","text":"sf::sfc_LINESTRING sf::sfc_MULTILINESTRING object representing initial corridor edges","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/load_dem.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve DEM data from a list of STAC assets — load_dem","title":"Retrieve DEM data from a list of STAC assets — load_dem","text":"Load DEM data list tiles, crop merge using given bounding box create raster DEM specified region. Results cached, new queries input parameters loaded disk.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/load_dem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve DEM data from a list of STAC assets — load_dem","text":"","code":"load_dem(bb, tile_urls, force_download = FALSE)"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/load_dem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve DEM data from a list of STAC assets — load_dem","text":"bb bounding box, provided either matrix (rows \"x\", \"y\", columns \"min\", \"max\") vector (\"xmin\", \"ymin\", \"xmax\", \"ymax\") class bbox. tile_urls list tiles read DEM data force_download Download data even cached data available","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/load_dem.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve DEM data from a list of STAC assets — load_dem","text":"DEM class terra::SpatRaster, retrieved retiled given bounding box","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/load_dem.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve DEM data from a list of STAC assets — load_dem","text":"","code":"if (FALSE) { # interactive() bb <- get_osm_bb(\"Bucharest\") tile_urls <- get_stac_asset_urls(bb) load_dem(bb = bb, tile_urls = tile_urls, force_download = TRUE) }"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/load_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Load raster data from one or multiple (remote) files — load_raster","title":"Load raster data from one or multiple (remote) files — load_raster","text":"bounding box provided, file(s) cropped given extent. resulting rasters merged using terra::merge.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/load_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load raster data from one or multiple (remote) files — load_raster","text":"","code":"load_raster(urlpaths, bbox = NULL)"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/load_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load raster data from one or multiple (remote) files — load_raster","text":"urlpaths Path URL raster file(s) bbox bounding box","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/load_raster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load raster data from one or multiple (remote) files — load_raster","text":"Raster data terra::SpatRaster object","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/mask_cost_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Mask out river regions incl. a buffer in cost distance raster data — mask_cost_distance","title":"Mask out river regions incl. a buffer in cost distance raster data — mask_cost_distance","text":"Mask river regions incl. buffer cost distance raster data","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/mask_cost_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mask out river regions incl. a buffer in cost distance raster data — mask_cost_distance","text":"","code":"mask_cost_distance(cd, river, buffer = 2000)"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/mask_cost_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mask out river regions incl. a buffer in cost distance raster data — mask_cost_distance","text":"cd cost distance raster river vector/polygon buffer size buffer around river polygon additionally mask","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/mask_cost_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mask out river regions incl. a buffer in cost distance raster data — mask_cost_distance","text":"cd raster river+BUFFER pixels masked","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/mask_slope.html","id":null,"dir":"Reference","previous_headings":"","what":"Mask slope raster, setting the slope to zero for the pixels overlapping the river area. — mask_slope","title":"Mask slope raster, setting the slope to zero for the pixels overlapping the river area. — mask_slope","text":"Mask slope raster, setting slope zero pixels overlapping river area.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/mask_slope.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mask slope raster, setting the slope to zero for the pixels overlapping the river area. — mask_slope","text":"","code":"mask_slope(slope, river, lthresh = 0.001, target = 0)"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/mask_slope.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mask slope raster, setting the slope to zero for the pixels overlapping the river area. — mask_slope","text":"slope raster data slope river vector/polygon data river lthresh lower numerival threshold consider slope non-zero target value set pixels overlapping river area","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/mask_slope.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mask slope raster, setting the slope to zero for the pixels overlapping the river area. — mask_slope","text":"updated slope raster","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/match_osm_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Match OpenStreetMap data by name — match_osm_name","title":"Match OpenStreetMap data by name — match_osm_name","text":"Match OpenStreetMap data name","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/match_osm_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match OpenStreetMap data by name — match_osm_name","text":"","code":"match_osm_name(osm_data, match)"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/match_osm_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Match OpenStreetMap data by name — match_osm_name","text":"osm_data sf object OpenStreetMap data match character string name match","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/match_osm_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Match OpenStreetMap data by name — match_osm_name","text":"sf object containing rows filtered name","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/nearest_node.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the node in a network that is closest to a target geometry. — nearest_node","title":"Find the node in a network that is closest to a target geometry. — nearest_node","text":"Find node network closest target geometry.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/nearest_node.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the node in a network that is closest to a target geometry. — nearest_node","text":"","code":"nearest_node(network, target)"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/nearest_node.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the node in a network that is closest to a target geometry. — nearest_node","text":"network network object class sfnetworks::sfnetwork target object class sf::sf sf::sfc","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/nearest_node.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the node in a network that is closest to a target geometry. — nearest_node","text":"node network object class sf::sfc_POINT","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/osmdata_as_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve OpenStreetMap data as sf object — osmdata_as_sf","title":"Retrieve OpenStreetMap data as sf object — osmdata_as_sf","text":"Query Overpass API key:value pair within given bounding box (provided lat/lon coordiates). Results cached, new queries input parameters loaded disk.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/osmdata_as_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve OpenStreetMap data as sf object — osmdata_as_sf","text":"","code":"osmdata_as_sf(key, value, aoi, force_download = FALSE)"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/osmdata_as_sf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve OpenStreetMap data as sf object — osmdata_as_sf","text":"key case-insensitive character vector length 1 key filter data value case-insensitive character vector value(s) filter data aoi area interest, provided either sf object \"bbox\" vector (\"xmin\", \"ymin\", \"xmax\", \"ymax\") force_download Download data even cached data available","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/osmdata_as_sf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve OpenStreetMap data as sf object — osmdata_as_sf","text":"osmdata::osmdata object retrieved OpenStreetMap data","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/osmdata_as_sf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve OpenStreetMap data as sf object — osmdata_as_sf","text":"","code":"if (FALSE) { # interactive() bb <- get_osm_bb(\"Bucharest\") osmdata_as_sf(key = \"highway\",               value = \"motorway\",               aoi = bb,               force_download = FALSE) }"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/osmdata_query.html","id":null,"dir":"Reference","previous_headings":"","what":"Query the Overpass API for a key:value pair within a bounding box — osmdata_query","title":"Query the Overpass API for a key:value pair within a bounding box — osmdata_query","text":"Query Overpass API key:value pair within bounding box","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/osmdata_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query the Overpass API for a key:value pair within a bounding box — osmdata_query","text":"","code":"osmdata_query(key, value, bb)"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/osmdata_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query the Overpass API for a key:value pair within a bounding box — osmdata_query","text":"key character string key filter data value character string value filter data. value = \"\" means get features available OSM specified bounding box bb bounding box, lat/lon coordinates","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/osmdata_query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query the Overpass API for a key:value pair within a bounding box — osmdata_query","text":"osmdata::osmdata object retrieved OpenStreetMap data","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/rcrisp-package.html","id":null,"dir":"Reference","previous_headings":"","what":"rcrisp: Automate the Delineation of Urban River Spaces — rcrisp-package","title":"rcrisp: Automate the Delineation of Urban River Spaces — rcrisp-package","text":"Provides tools automate morphological delineation riverside urban areas based method introduced Forgaci (2018) doi:10.7480/abe.2018.31 . Delineation entails identification corridor boundaries, segmentation corridor, delineation river space using two-dimensional spatial information street network data digital elevation data projected CRS. resulting delineation can used characterise spatial phenomena can related river central element.","code":""},{"path":[]},{"path":"https://cityriverspaces.github.io/rcrisp/reference/rcrisp-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"rcrisp: Automate the Delineation of Urban River Spaces — rcrisp-package","text":"Maintainer: Claudiu Forgaci c.forgaci@tudelft.nl (ORCID) [copyright holder] Authors: Francesco Nattino f.nattino@esciencecenter.nl (ORCID) contributors: Fakhereh Alidoost f.alidoost@esciencecenter.nl (ORCID) [contributor] Meiert Willem Grootes m.grootes@esciencecenter.nl (ORCID) [contributor] Netherlands eScience Center info@esciencecenter.nl [funder]","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/read_data_from_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Read data from the cache directory — read_data_from_cache","title":"Read data from the cache directory — read_data_from_cache","text":"directory used caching see cache_directory().","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/read_data_from_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read data from the cache directory — read_data_from_cache","text":"","code":"read_data_from_cache(filepath, unwrap = FALSE, quiet = FALSE)"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/read_data_from_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read data from the cache directory — read_data_from_cache","text":"filepath Path file deserialize character string unwrap Whether deserialized object \"unpacked\" (required terra::SpatRaster objects) quiet Omit warning cache file loaded","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/read_data_from_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read data from the cache directory — read_data_from_cache","text":"Object deserialized","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/reproject.html","id":null,"dir":"Reference","previous_headings":"","what":"Reproject a raster or vector dataset to the specified coordinate reference system (CRS) — reproject","title":"Reproject a raster or vector dataset to the specified coordinate reference system (CRS) — reproject","text":"Reproject raster vector dataset specified coordinate reference system (CRS)","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/reproject.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reproject a raster or vector dataset to the specified coordinate reference system (CRS) — reproject","text":"","code":"reproject(x, crs, ...)"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/reproject.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reproject a raster or vector dataset to the specified coordinate reference system (CRS) — reproject","text":"x Raster (SpatRaster) vector (sf) object crs CRS projected , provided numeric, integer logical vector length one sf::crs. numeric, value positive number unrestricted upper bound representing valid EPSG code. ... Optional arguments raster vector reproject functions","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/reproject.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reproject a raster or vector dataset to the specified coordinate reference system (CRS) — reproject","text":"sf::sf, sf::sfc, terra::SpatRaster object reprojected specified CRS","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/reproject.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reproject a raster or vector dataset to the specified coordinate reference system (CRS) — reproject","text":"","code":"# Reproject a raster to EPSG:4326 r <- terra::rast(matrix(1:12, nrow = 3, ncol = 4), crs = \"EPSG:32633\") reproject(r, 4326) #> class       : SpatRaster  #> size        : 3, 4, 1  (nrow, ncol, nlyr) #> resolution  : 8.98078e-06, 8.98078e-06  (x, y) #> extent      : 10.51126, 10.51129, 1.157883e-07, 2.705813e-05  (xmin, xmax, ymin, ymax) #> coord. ref. : lon/lat WGS 84 (EPSG:4326)  #> source(s)   : memory #> name        :     lyr.1  #> min value   :  1.003647  #> max value   : 11.989302"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/river_buffer.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw a corridor as a fixed buffer region around a river. — river_buffer","title":"Draw a corridor as a fixed buffer region around a river. — river_buffer","text":"river geometry may consist multiple spatial features, optionally cropped using area interest, merged applying buffer.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/river_buffer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw a corridor as a fixed buffer region around a river. — river_buffer","text":"","code":"river_buffer(river, buffer_distance, bbox = NULL, side = NULL)"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/river_buffer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw a corridor as a fixed buffer region around a river. — river_buffer","text":"river simple feature geometry representing river buffer_distance Size buffer (river's CRS units) bbox Bounding box defining extent area interest side Whether generate single-sided buffer \"flat\" end. applicable river (multi)linestring geometry. Choose NULL (double-sided), \"right\" \"left\"","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/river_buffer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw a corridor as a fixed buffer region around a river. — river_buffer","text":"object class sf::sfc_POLYGON","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/select_nonintersecting_lines.html","id":null,"dir":"Reference","previous_headings":"","what":"Select non-intersecting line segments — select_nonintersecting_lines","title":"Select non-intersecting line segments — select_nonintersecting_lines","text":"Recursively drop intersecting lines, starting line form intersections geometries. multilple lines form number intersections geometries, longest line discarded first. Note lines allowed intersect corridor boundary.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/select_nonintersecting_lines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select non-intersecting line segments — select_nonintersecting_lines","text":"","code":"select_nonintersecting_lines(lines, corridor)"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/select_nonintersecting_lines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select non-intersecting line segments — select_nonintersecting_lines","text":"lines Candidate edge segment simple feature geometry corridor river corridor simple feature geometry","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/select_nonintersecting_lines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select non-intersecting line segments — select_nonintersecting_lines","text":"set lines class sf::sfc_LINESTRING intersect within corridor geometry, simple feature geometry","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/set_units_like.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the units of x as the units of y — set_units_like","title":"Set the units of x as the units of y — set_units_like","text":"Set units x units y","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/set_units_like.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the units of x as the units of y — set_units_like","text":"","code":"set_units_like(x, y)"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/set_units_like.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the units of x as the units of y — set_units_like","text":"x x (can unitless) y y (can unitless)","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/set_units_like.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the units of x as the units of y — set_units_like","text":"Object x units y","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/shortest_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Find shortest path between a pair of nodes in the network. — shortest_path","title":"Find shortest path between a pair of nodes in the network. — shortest_path","text":"Find shortest path pair nodes network.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/shortest_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find shortest path between a pair of nodes in the network. — shortest_path","text":"","code":"shortest_path(network, from, to, weights = \"weight\")"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/shortest_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find shortest path between a pair of nodes in the network. — shortest_path","text":"network spatial network object class sfnetworks::sfnetwork Start node End node weights Name column network edge table take weigths","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/shortest_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find shortest path between a pair of nodes in the network. — shortest_path","text":"sf::sfc_LINESTRING object","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/simplify_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Simplify a spatial network by removing multiple edges and loops. — simplify_network","title":"Simplify a spatial network by removing multiple edges and loops. — simplify_network","text":"Simplify graph, removing loops double-edge connections following approach. dropping multiple edges, keep shortest ones.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/simplify_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simplify a spatial network by removing multiple edges and loops. — simplify_network","text":"","code":"simplify_network(network)"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/simplify_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simplify a spatial network by removing multiple edges and loops. — simplify_network","text":"network network object","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/simplify_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simplify a spatial network by removing multiple edges and loops. — simplify_network","text":"simplifed network object","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/smooth_dem.html","id":null,"dir":"Reference","previous_headings":"","what":"Spatially smooth dem by (window) filtering — smooth_dem","title":"Spatially smooth dem by (window) filtering — smooth_dem","text":"Spatially smooth dem (window) filtering","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/smooth_dem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spatially smooth dem by (window) filtering — smooth_dem","text":"","code":"smooth_dem(dem, method = \"median\", window = 5)"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/smooth_dem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spatially smooth dem by (window) filtering — smooth_dem","text":"dem raster data dem method smoothing function used, e.g. \"median\", accepted terra::focal() window size smoothing kernel","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/smooth_dem.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spatially smooth dem by (window) filtering — smooth_dem","text":"filtered dem","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/split_by.html","id":null,"dir":"Reference","previous_headings":"","what":"Split a geometry along a (multi)linestring. — split_by","title":"Split a geometry along a (multi)linestring. — split_by","text":"Split geometry along (multi)linestring.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/split_by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split a geometry along a (multi)linestring. — split_by","text":"","code":"split_by(geometry, line, boundary = FALSE)"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/split_by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split a geometry along a (multi)linestring. — split_by","text":"geometry Geometry split line Dividing (multi)linestring boundary Whether return split boundary instead regions","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/split_by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split a geometry along a (multi)linestring. — split_by","text":"object class sf::sfc","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/write_data_to_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Write data to the cache directory — write_data_to_cache","title":"Write data to the cache directory — write_data_to_cache","text":"Write object serialised form (RDS) cache directory. directory used caching see cache_directory().","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/write_data_to_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write data to the cache directory — write_data_to_cache","text":"","code":"write_data_to_cache(x, filepath, wrap = FALSE, quiet = FALSE)"},{"path":"https://cityriverspaces.github.io/rcrisp/reference/write_data_to_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write data to the cache directory — write_data_to_cache","text":"x Object serialize file filepath Path serialize x, character string wrap Whether object \"packed\" serialization (required terra::SpatRaster objects) quiet Omit message cache file written","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/reference/write_data_to_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write data to the cache directory — write_data_to_cache","text":"NULL invisibly","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/news/index.html","id":"rcrisp-020---2025-08-21","dir":"Changelog","previous_headings":"","what":"rcrisp 0.2.0 - 2025-08-21","title":"rcrisp 0.2.0 - 2025-08-21","text":"CRAN release: 2025-08-21","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/news/index.html","id":"added-0-2-0","dir":"Changelog","previous_headings":"","what":"Added","title":"rcrisp 0.2.0 - 2025-08-21","text":"Package-level documentation added. Assertions using checkmate package added input parameters throughout package. Examples expanded demonstrates use parameters. Delineated valley added bucharest_dambovita example package data.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/news/index.html","id":"fixed-0-2-0","dir":"Changelog","previous_headings":"","what":"Fixed","title":"rcrisp 0.2.0 - 2025-08-21","text":"Classes input parameters return values specified. get_osm_example_data() get_dem_example_data() fail gracefully examples, vignettes tests, , return message NULL, internet resource available.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/news/index.html","id":"changed-0-2-0","dir":"Changelog","previous_headings":"","what":"Changed","title":"rcrisp 0.2.0 - 2025-08-21","text":"Replaced sapply() vapply() throughout package improved type safety. Updated package metadata DESCRIPTION codemeta.json Organized function reference page meaningful sections.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/news/index.html","id":"removed-0-2-0","dir":"Changelog","previous_headings":"","what":"Removed","title":"rcrisp 0.2.0 - 2025-08-21","text":"dem_to_ceg() function removed package used.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/news/index.html","id":"version-014---2025-07-04","dir":"Changelog","previous_headings":"","what":"Version 0.1.4 - 2025-07-04","title":"Version 0.1.4 - 2025-07-04","text":"CRAN release: 2025-07-04","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/news/index.html","id":"added-0-1-4","dir":"Changelog","previous_headings":"","what":"Added","title":"Version 0.1.4 - 2025-07-04","text":"CRAN badge added README. DOI added CITATION.cff, DESCRIPTION README (badge)","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/news/index.html","id":"fixed-0-1-4","dir":"Changelog","previous_headings":"","what":"Fixed","title":"Version 0.1.4 - 2025-07-04","text":"check_cache() run package attached, loaded avoid namespace issues.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/news/index.html","id":"changed-0-1-4","dir":"Changelog","previous_headings":"","what":"Changed","title":"Version 0.1.4 - 2025-07-04","text":"Vignette file names updated ensure listed order CRAN.","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/news/index.html","id":"version-013---2025-06-27","dir":"Changelog","previous_headings":"","what":"Version 0.1.3 - 2025-06-27","title":"Version 0.1.3 - 2025-06-27","text":"CRAN release: 2025-07-02","code":""},{"path":"https://cityriverspaces.github.io/rcrisp/news/index.html","id":"fixed-0-1-3","dir":"Changelog","previous_headings":"","what":"Fixed","title":"Version 0.1.3 - 2025-06-27","text":"Tests retrieving DEM data AWS either removed mocked avoid issues AWS API. Warnings delineation tests safely suppressed.","code":""},{"path":[]},{"path":"https://cityriverspaces.github.io/rcrisp/news/index.html","id":"changed-0-1-2","dir":"Changelog","previous_headings":"","what":"Changed","title":"Version 0.1.2 - 2025-06-26","text":"default cache directory moved path given tools::R_user_dir(). Checks cache directory size outdated files now included package load. Tests test-delineate.R test-osmdata.R partly rewritten, use less resources complete reasonable amount time.","code":""},{"path":[]},{"path":"https://cityriverspaces.github.io/rcrisp/news/index.html","id":"fixed-0-1-1","dir":"Changelog","previous_headings":"","what":"Fixed","title":"Version 0.1.1 - 2025-06-24","text":"Examples take long run run interactive mode","code":""},{"path":[]},{"path":"https://cityriverspaces.github.io/rcrisp/news/index.html","id":"added-0-1-0","dir":"Changelog","previous_headings":"","what":"Added","title":"Version 0.1.0 - 2025-06-23","text":"first version package created","code":""}]
